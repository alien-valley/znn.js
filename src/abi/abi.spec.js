const {StakeABI, PillarABI, TokenABI} = require('../embedded');
const {Address, znnZts} = require("../model");

const TmpAddress = Address.Parse('z1qp5hmcddaxd8ranhu25n4nycf8q9vsg6ksqjlg');

describe('abi', () => {
    test('pillar.Register', async () => {
        expect(PillarABI.encode('Register', ['Really long text which is more than 32 bytes', TmpAddress, 'z1qp5hmcddaxd8ranhu25n4nycf8q9vsg6ksqjlg', 50, 75]).toString('hex')).toEqual(
            '644de92700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000697de1ade99a71f677e2a93acc9849c056411a00000000000000000000000000697de1ade99a71f677e2a93acc9849c056411a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000002c5265616c6c79206c6f6e672074657874207768696368206973206d6f7265207468616e2033322062797465730000000000000000000000000000000000000000'
        );
    });
    test('token.IssueTokenABI', async () => {
        expect(
            TokenABI.encode('IssueToken', [
                'Really long text which is more than 32 bytes',
                'kinda short text',
                'what is this text does it ever end?01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789',
                '100192674782882803782111440113414025682552479032328974299164963818116775820252',
                '123456789',
                123,
                true,
                false,
                true
            ]).toString('hex')
        ).toEqual(
            'bc410b910000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0dd830b5795be3bb449f464cece7ac7f1e2d05e8f219975dc8dbcaf4c8d723bdc00000000000000000000000000000000000000000000000000000000075bcd15000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002c5265616c6c79206c6f6e672074657874207768696368206973206d6f7265207468616e203332206279746573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106b696e64612073686f72742074657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091776861742069732074686973207465787420646f6573206974206576657220656e643f3031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839000000000000000000000000000000'
        );
    });
    test('token.Mint', async () => {
        expect(TokenABI.encode('Mint', [znnZts, 123456789, TmpAddress]).toString('hex')).toEqual(
            'cd70f9bc0000000000000000000000000000000000000000000014e66318c6318c6318c600000000000000000000000000000000000000000000000000000000075bcd1500000000000000000000000000697de1ade99a71f677e2a93acc9849c056411a'
        );
    });
    test('stake.Cancel', async () => {
        expect(StakeABI.encode('Cancel', ['0x1234567812345678123456781234567812345678123456781234567812345678']).toString('hex')).toEqual(
            '5a92fe321234567812345678123456781234567812345678123456781234567812345678'
        );
    });

    test('pillar.Register.decode', async () => {
        const d = PillarABI.decode(
            'Register',
            '08b67cdf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000697de1ade99a71f677e2a93acc9849c056411a00000000000000000000000000697de1ade99a71f677e2a93acc9849c056411a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000002c5265616c6c79206c6f6e672074657874207768696368206973206d6f7265207468616e2033322062797465730000000000000000000000000000000000000000'
        );
        expect(JSON.stringify(d, null, '')).toEqual(
            `{"name":"Really long text which is more than 32 bytes","producerAddress":"z1qp5hmcddaxd8ranhu25n4nycf8q9vsg6ksqjlg","rewardAddress":"z1qp5hmcddaxd8ranhu25n4nycf8q9vsg6ksqjlg","giveBlockRewardPercentage":50,"giveDelegateRewardPercentage":75}`
        );
    });
    test('token.IssueTokenABI.decode', async () => {
        const d = TokenABI.decode(
            'IssueToken',
            'bc410b910000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0dd830b5795be3bb449f464cece7ac7f1e2d05e8f219975dc8dbcaf4c8d723bdc00000000000000000000000000000000000000000000000000000000075bcd15000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002c5265616c6c79206c6f6e672074657874207768696368206973206d6f7265207468616e203332206279746573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106b696e64612073686f72742074657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091776861742069732074686973207465787420646f6573206974206576657220656e643f3031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839000000000000000000000000000000'
        );
        expect(JSON.stringify(d, null, '')).toEqual(
            `{"tokenName":"Really long text which is more than 32 bytes","tokenSymbol":"kinda short text","tokenDomain":"what is this text does it ever end?01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789","totalSupply":{"type":"BigNumber","hex":"0xdd830b5795be3bb449f464cece7ac7f1e2d05e8f219975dc8dbcaf4c8d723bdc"},"maxSupply":{"type":"BigNumber","hex":"0x075bcd15"},"decimals":123,"isMintable":true,"isBurnable":false,"isUtility":true}`
        );
    });
    test('token.Mint.decode', async () => {
        const d = TokenABI.decode(
            'Mint',
            'cd70f9bc0000000000000000000000000000000000000000000014e66318c6318c6318c600000000000000000000000000000000000000000000000000000000075bcd1500000000000000000000000000697de1ade99a71f677e2a93acc9849c056411a'
        );
        expect(JSON.stringify(d, null, '')).toEqual(
            `{"tokenStandard":"zts1znnxxxxxxxxxxxxx9z4ulx","amount":{"type":"BigNumber","hex":"0x075bcd15"},"receiveAddress":"z1qp5hmcddaxd8ranhu25n4nycf8q9vsg6ksqjlg"}`
        );
    });
    test('stake.Cancel.decode', async () => {
        const d = StakeABI.decode(
            'Cancel',
            '5a92fe321234567812345678123456781234567812345678123456781234567812345678'
        );
        expect(JSON.stringify(d, null, '')).toEqual(
            `{"id":"0x1234567812345678123456781234567812345678123456781234567812345678"}`
        );
    });
});
